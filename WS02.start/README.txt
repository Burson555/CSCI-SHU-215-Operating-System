Bosen Yang by570





####################################################################################################
compiling rules START
####################################################################################################

make Q2: Q2.
make Q3: Q3.
make clean: remove all files in bin/, src/ and lib/ for a fresh restart

####################################################################################################
compiling rules END
####################################################################################################



####################################################################################################
files description START
####################################################################################################

src/decoder.c: Q2
src/converters.c: Q3

bin/decoder: Q2
bin/converters: Q3

makefile: contains the compilation instructions for Q2 and Q3.

####################################################################################################
files description END
####################################################################################################



####################################################################################################
Q1 START
####################################################################################################
There are in total 6 child processes created.

The family tree:
					 P
				  /  | \
				 /	 |  \
				C0	C1	 C2
					 |	  |
					 |	  |
					G0	 G1
						  |
						  |
						GG0

Outputs:

	P:		(prints nothing, no output)

	C0:		i = 0
			j = 0

	C1:		i = 1

	C2:		i = 2

	G0:		j = 1

	G1:		(prints nothing, no output)

	GG0:	j = 2

Modified Codes:

	int main (int arg, char * argv []) {
		int i, j, p;
		for (i = 0; i <3; i ++) {
			if ((p = fork ()) == 0){
				printf( "i =% d \ n", i)
				j = 0;
				while ((j < i) && ((p = fork ()) == 0))
					j ++;
				if (p == 0) 
					printf ( "j =% d \ n", j);

				// ############# midofication No.1 START #############
				else
					wait();
				// ############# midofication No.1 END #############
				
				exit(j);
			}/ * if * /
		}

		// ############# midofication No.2 START #############
		for (i = 0; i <3; i ++)
			wait();
		// ############# midofication No.2 END #############

		return (0);
	}


####################################################################################################
Q1 END
####################################################################################################

